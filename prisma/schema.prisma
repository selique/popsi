datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

generator client {
   provider = "prisma-client-js"
}

model Profile {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Profile data mutable
   full_name       String?
   avatar_url      String?
   bio             String?
   nickname        String?
   pronoun         String?
   gender_identity String?
   cpf             String?
   birth_date      DateTime? @db.Date
   crp_number      String?
   crp_region      String?
   role            Role?     @default(PATIENT)

   // Relation: Surveys
   owner_survey         Surveys[]              @relation("owner_id")
   SurveyGenerateInvite SurveyGenerateInvite[]

   // Relation: Answer
   answers Answer[]

   // Relation: Notifications
   medic_notifications   SurveysNotifications[] @relation("medic_surveys_notifications")
   patient_notifications SurveysNotifications[] @relation("patient_surveys_notifications")

   // Relation Self: Medic
   medic_id      String?  @unique @db.Uuid
   medic         Profile? @relation("medic", fields: [medic_id], references: [id], onDelete: Cascade)
   medicRelation Profile? @relation("medic")

   // Relation: Messages
   sender   Messages[] @relation("sender_user")
   receiver Messages[] @relation("receiver_user")

   // Relation: Chats
   medic_chat   Chats[] @relation("medic_chat")
   patient_chat Chats[] @relation("patient_chat")

   // Timestamp
   created_at    DateTime        @default(now()) @db.Timestamptz()
   SurveyInvited SurveyInvited[]

   @@map("profiles")
}

enum Role {
   PATIENT
   MEDIC

   @@map("roles")
}

model SurveyGenerateInvite {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   patient    Profile @relation(fields: [patient_id], references: [id], onDelete: Cascade)
   patient_id String  @db.Uuid

   survey    Surveys @relation(fields: [survey_id], references: [id], onDelete: Cascade)
   survey_id String  @db.Uuid

   allow_reply_later Boolean @default(false)

   active Boolean @default(true)

   schedule String

   created_at DateTime @default(now()) @db.Timestamptz()

   SurveyInvited SurveyInvited[]

   @@map("survey_generate_invite")
}

model SurveyInvited {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   survey_generate_invite    SurveyGenerateInvite @relation(fields: [survey_generate_invite_id], references: [id], onDelete: Cascade)
   survey_generate_invite_id String               @db.Uuid

   patient    Profile @relation(fields: [patient_id], references: [id], onDelete: Cascade)
   patient_id String  @db.Uuid

   status SurveyInvitedStatus? @default(PENDING)

   created_at DateTime @default(now()) @db.Timestamptz()

   @@map("_survey_invited")
}

enum SurveyInvitedStatus {
   PENDING
   FINISHED
   FINISHED_LATE
   LATE
   EXPIRED

   @@map("survey_invited_status")
}

model Surveys {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Survey data
   title       String
   description String
   question    Question[]

   // Relation: Medic
   Owner    Profile @relation("owner_id", fields: [owner_id], references: [id], onDelete: Cascade)
   owner_id String  @db.Uuid

   // Relation: Patients
   SurveyGenerateInvite SurveyGenerateInvite[]

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   SurveysNotifications SurveysNotifications[]

   @@map("surveys")
}

model Question {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Question data
   question     String
   description  String?
   alternatives String[]

   type   QuestionTypes
   Answer Answer[]

   // Relation: Surveys
   Surveys   Surveys? @relation(fields: [surveysId], references: [id], onDelete: Cascade)
   surveysId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   @@map("questions")
}

enum QuestionTypes {
   TEXT
   MULTIPLE_CHOICE
   SINGLE_CHOICE
   RATING

   @@map("answer_types")
}

model Answer {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Answer data
   answer String[]

   // Relation: Profiles
   Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
   profileId String   @db.Uuid

   // Relation: Question
   Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
   questionId String   @db.Uuid

   // Timestamp
   created_at DateTime @default(now()) @db.Timestamptz()

   @@map("answers")
}

model SurveysNotifications {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   content String?

   status SurveysNotificationsStatus @default(RECEIVED)
   for    SurveysNotificationFor     @default(PATIENT)

   // Relation: Profiles
   Medic    Profile? @relation("medic_surveys_notifications", fields: [medic_id], references: [id], onDelete: Cascade)
   medic_id String?  @db.Uuid

   Patient    Profile? @relation("patient_surveys_notifications", fields: [patient_id], references: [id], onDelete: Cascade)
   patient_id String?  @db.Uuid

   // Relation: Surveys
   Surveys    Surveys? @relation(fields: [surveys_id], references: [id], onDelete: Cascade)
   surveys_id String   @db.Uuid

   // Timestamp
   updated_at DateTime? @db.Timestamptz()
   created_at DateTime  @default(now()) @db.Timestamptz()

   @@map("surveys_notifications")
}

enum SurveysNotificationsStatus {
   SENT
   RECEIVED
   IN_PROGRESS
   READED
   FINISHED

   @@map("surveys_notifications_status")
}

enum SurveysNotificationFor {
   MEDIC
   PATIENT

   @@map("surveys_notifications_for")
}

model Messages {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Message data
   message String?
   image   String?
   video   String?
   audio   String?

   status MessagesStatus @default(SENT)

   // Relation: Profiles
   Sender    Profile? @relation("sender_user", fields: [sender_id], references: [id], onDelete: Cascade)
   sender_id String?  @db.Uuid

   Receiver    Profile? @relation("receiver_user", fields: [receiver_id], references: [id], onDelete: Cascade)
   receiver_id String?  @db.Uuid

   // Relation: Chats
   Chat    Chats? @relation(fields: [chat_id], references: [id], onDelete: Cascade)
   chat_id String @db.Uuid

   // Timestamp
   updated_at DateTime? @db.Timestamptz()
   created_at DateTime  @default(now()) @db.Timestamptz()

   @@map("messages")
}

enum MessagesStatus {
   PENDING
   SENT
   READ

   @@map("messages_status")
}

model Chats {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Relation: Messages
   Messages Messages[]

   // Relation: Profiles
   medic_chat Profile? @relation("medic_chat", fields: [medic_id], references: [id], onDelete: Cascade)
   medic_id   String   @db.Uuid

   patient_chat Profile? @relation("patient_chat", fields: [patient_id], references: [id], onDelete: Cascade)
   patient_id   String   @db.Uuid

   @@map("chats")
}
