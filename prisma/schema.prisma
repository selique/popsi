datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

generator client {
   provider = "prisma-client-js"
}

model Profile {
   id String @id @unique @default(uuid()) @db.Uuid

   // Profile data mutable
   full_name       String?
   avatar_url      String?
   bio             String?
   nickname        String?
   matrial_status  String?
   gender          String?
   gender_identity String?
   cpf             String?
   birth_date      DateTime? @db.Date
   role            Role?     @default(PATIENT)

   // Relation: Surveys
   surveys Surveys[]

   // Relation: Answer
   answers Answer[]

   // Relation Self: Medic
   medic_id      String?  @unique @db.Uuid
   medic         Profile? @relation("medic", fields: [medic_id], references: [id])
   medicRelation Profile? @relation("medic")

   // Timestamp
   created_at DateTime  @default(now())
   updated_at DateTime?
   @@map("profiles")
}

enum Role {
   PATIENT
   MEDIC

   @@map("roles")
}

model Surveys {
   id String @id @unique @default(uuid()) @db.Uuid

   // Survey data
   title       String
   description String
   question    Question[]

   // Relation: Profiles
   Profile   Profile? @relation(fields: [profileId], references: [id])
   profileId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now())
   updated_at DateTime?


   @@map("surveys")
}

model Question {
   id String @id @unique @default(uuid()) @db.Uuid

   // Question data
   question     String
   description  String?
   alternatives String[]

   type   QuestionTypes
   Answer Answer[]

   // Relation: Surveys
   Surveys   Surveys? @relation(fields: [surveysId], references: [id])
   surveysId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now())
   updated_at DateTime?

   @@map("questions")
}

enum QuestionTypes {
   TEXT
   MULTIPLE_CHOICE
   SINGLE_CHOICE
   RATING

   @@map("answer_types")
}

model Answer {
   id String @id @unique @default(uuid()) @db.Uuid

   // Answer data
   answer String[]

   // Relation: Profiles
   Profile   Profile? @relation(fields: [profileId], references: [id])
   profileId String   @db.Uuid

   // Relation: Question
   question   Question @relation(fields: [questionId], references: [id])
   questionId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now())
   updated_at DateTime?

   @@map("answers")
}
