datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

generator client {
   provider = "prisma-client-js"
}

model Profile {
   id String @id @unique @default(uuid()) @db.Uuid

   // Profile data mutable
   full_name       String?
   avatar_url      String?
   bio             String?
   nickname        String?
   matrial_status  String?
   gender          String?
   gender_identity String?
   cpf             String?
   birth_date      DateTime? @db.Date
   role            Role?     @default(PATIENT)

   // Relation: Surveys
   owner_survey  Surveys[]       @relation("owner_id")
   SurveyInvited SurveyInvited[]

   // Relation: Answer
   answers Answer[]

   // Relation: Notifications
   medic_notifications   SurveysNotifications[] @relation("medic_surveys_notifications")
   patient_notifications SurveysNotifications[] @relation("patient_surveys_notifications")

   // Relation Self: Medic
   medic_id      String?  @unique @db.Uuid
   medic         Profile? @relation("medic", fields: [medic_id], references: [id])
   medicRelation Profile? @relation("medic")

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   @@map("profiles")
}

model SurveyInvited {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   profile_id Profile @relation(fields: [A], references: [id])
   A          String  @db.Uuid

   survey_id Surveys @relation(fields: [B], references: [id])
   B         String  @db.Uuid

   @@map("_survey_invited")
}

enum Role {
   PATIENT
   MEDIC

   @@map("roles")
}

model Surveys {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Survey data
   title       String
   description String
   question    Question[]

   // Relation: Medic
   Owner    Profile @relation("owner_id", fields: [owner_id], references: [id])
   owner_id String  @db.Uuid

   // Relation: Patients
   SurveyInvited SurveyInvited[]

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   SurveysNotifications SurveysNotifications[]

   @@map("surveys")
}

model Question {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Question data
   question     String
   description  String?
   alternatives String[]

   type   QuestionTypes
   Answer Answer[]

   // Relation: Surveys
   Surveys   Surveys? @relation(fields: [surveysId], references: [id])
   surveysId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   @@map("questions")
}

enum QuestionTypes {
   TEXT
   MULTIPLE_CHOICE
   SINGLE_CHOICE
   RATING

   @@map("answer_types")
}

model Answer {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   // Answer data
   answer String[]

   // Relation: Profiles
   Profile   Profile? @relation(fields: [profileId], references: [id])
   profileId String   @db.Uuid

   // Relation: Question
   Question   Question @relation(fields: [questionId], references: [id])
   questionId String   @db.Uuid

   // Timestamp
   created_at DateTime  @default(now()) @db.Timestamptz()
   updated_at DateTime? @db.Timestamptz()

   @@map("answers")
}

model SurveysNotifications {
   id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   content String?

   status SurveysNotificationsStatus @default(RECEIVED)
   for    SurveysNotificationFor     @default(PATIENT)

   // Relation: Profiles
   Medic    Profile? @relation("medic_surveys_notifications", fields: [medic_id], references: [id])
   medic_id String?  @db.Uuid

   Patient    Profile? @relation("patient_surveys_notifications", fields: [patient_id], references: [id])
   patient_id String?  @db.Uuid

   // Relation: Surveys
   Surveys    Surveys? @relation(fields: [surveys_id], references: [id])
   surveys_id String   @db.Uuid

   // Timestamp
   updated_at DateTime? @db.Timestamptz()
   created_at DateTime  @default(now()) @db.Timestamptz()

   @@map("surveys_notifications")
}

enum SurveysNotificationsStatus {
   SENT
   RECEIVED
   IN_PROGRESS
   READED
   FINISHED

   @@map("surveys_notifications_status")
}

enum SurveysNotificationFor {
   MEDIC
   PATIENT

   @@map("surveys_notifications_for")
}
